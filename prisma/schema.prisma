// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum Genders {
  MEN
  WOMEN
}

model Gender {
  id                      String                    @id @default(cuid())
  name                    Genders                   @unique
  categories              Category[]
  featuredCollection      FeaturedCollection?
  updatedAt               DateTime                  @updatedAt
  bannerUrls              String[]
  products                Product[]
  complemantaryCollection ComplemantaryCollection[]
}

model Category {
  id                      String                    @id @default(cuid())
  name                    String
  gender                  Gender                    @relation(fields: [genderName], references: [name])
  genderName              Genders
  products                Product[]
  uriName                 String?
  bentoUrls               String[]
  complementaryCollection ComplemantaryCollection[]

  @@unique([id, uriName])
  @@index([genderName])
}

// store the image uri from cloudinary, images are not directly saved in my db
model Product {
  id                      String                    @id @default(cuid())
  name                    String
  categorie               Category?                 @relation(fields: [categoryId, categoryUriName], references: [id, uriName])
  categoryId              String
  categoryUriName         String?
  imageUrl                String
  featuredCollection      FeaturedCollection[]
  createdAt               DateTime                  @default(now())
  description             String?
  price                   Decimal
  gender                  Gender?                   @relation(fields: [genderName], references: [name])
  genderName              Genders?
  complemantaryCollection ComplemantaryCollection[]

  @@index([categoryId])
}

model FeaturedCollection {
  id        String    @id @default(cuid())
  name      String
  products  Product[]
  gender    Gender?   @relation(fields: [genderId], references: [id])
  genderId  String?   @unique
  updatedAt DateTime  @updatedAt
}

model ComplemantaryCollection {
  id         String     @id @default(cuid())
  name       String
  products   Product[]
  category   Category[]
  gender     Gender?    @relation(fields: [genderName], references: [name])
  genderName Genders?
  updatedAt  DateTime   @updatedAt
}
